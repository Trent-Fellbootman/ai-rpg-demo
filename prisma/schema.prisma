// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// The below data models were generated by OpenAI o1 and finetuned by Trent Fellbootman

model User {
  id                 Int                   @id @default(autoincrement())
  name               String?
  email              String                @unique
  hashedPassword     String
  gameSessions       GameSession[]
  gameTemplates      GameTemplate[]
  gameTemplateLikes  GameTemplateLike[]
  comments           GameTemplateComment[]
  gameTemplateVisits GameTemplateVisit[]
  gameTemplatePushes GameTemplatePush[]
}

model GameSession {
  id                 Int           @id @default(autoincrement())
  name               String
  backstory          String
  description        String?
  imagePath          String
  imageUrl           String?
  imageUrlExpiration DateTime?
  imageDescription   String
  creationTimestamp  DateTime      @default(now())
  deleted            Boolean       @default(false)
  deletionTimestamp  DateTime?
  user               User          @relation(fields: [userId], references: [id])
  userId             Int
  scenes             Scene[]
  isLocked           Boolean       @default(false)
  parentTemplate     GameTemplate? @relation(fields: [parentTemplateId], references: [id])
  parentTemplateId   Int?
}

model Scene {
  id                  Int         @id @default(autoincrement())
  imagePath           String
  imageUrl            String?
  imageUrlExpiration  DateTime?
  imageDescription    String
  event               String
  narration           String
  action              String?
  orderInSession      Int
  generationTimestamp DateTime    @default(now())
  deleted             Boolean     @default(false)
  deletionTimestamp   DateTime?
  actionTimestamp     DateTime?
  gameSession         GameSession @relation(fields: [gameSessionId], references: [id])
  gameSessionId       Int
}

model GameTemplate {
  id                 Int                   @id @default(autoincrement())
  name               String
  backstory          String
  description        String?
  imagePath          String
  imageDescription   String
  imageUrl           String?
  imageUrlExpiration DateTime?
  creationTimestamp  DateTime              @default(now())
  deleted            Boolean               @default(false)
  deletionTimestamp  DateTime?
  isPublic           Boolean               @default(false)
  user               User                  @relation(fields: [userId], references: [id])
  userId             Int
  likes              GameTemplateLike[]
  comments           GameTemplateComment[]
  childGameSessions  GameSession[]
  userVisits         GameTemplateVisit[]
  userPushes         GameTemplatePush[]
}

model GameTemplateVisit {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  gameTemplate   GameTemplate @relation(fields: [gameTemplateId], references: [id])
  userId         Int
  gameTemplateId Int

  @@unique([userId, gameTemplateId])
}

model GameTemplatePush {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  gameTemplate   GameTemplate @relation(fields: [gameTemplateId], references: [id])
  userId         Int
  gameTemplateId Int

  @@unique([userId, gameTemplateId])
}

view GameTemplateStatistics {
  // The ID of the game template
  id                            Int @unique
  // The number of undeleted likes
  undeletedLikeCount            Int
  // The number of likes (including deleted) in history
  historicalLikeCount           Int
  // The number of undeleted comments
  undeletedCommentCount         Int
  // The number of comments (including deleted) in history
  historicalCommentCount        Int
  // The number of child (including deleted) sessions
  childSessionsCount            Int
  // The number actions taken (scene count - 1 for a session) in all game sessions created from this template
  childSessionsUserActionsCount Int
  // The number of times users visit the overview page of this template
  visitCount                    Int
  // The number of times this template appears in the Trending Templates View
  trendingPushCount             Int
}

model GameTemplateLike {
  id                Int          @id @default(autoincrement())
  user              User         @relation(fields: [userId], references: [id])
  userId            Int
  gameTemplate      GameTemplate @relation(fields: [gameTemplateId], references: [id])
  gameTemplateId    Int
  createdAt         DateTime     @default(now())
  deleted           Boolean      @default(false)
  deletionTimestamp DateTime?

  @@unique([userId, gameTemplateId])
}

model GameTemplateComment {
  id                Int          @id @default(autoincrement())
  text              String
  createdAt         DateTime     @default(now())
  deleted           Boolean      @default(false)
  deletionTimestamp DateTime?
  user              User         @relation(fields: [userId], references: [id])
  userId            Int
  gameTemplate      GameTemplate @relation(fields: [gameTemplateId], references: [id])
  gameTemplateId    Int
}
